<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta charset="utf-8"/>
<meta name="generator" content="Docutils 0.16: http://docutils.sourceforge.net/" />
<title>Efficient live full disk backup</title>

</head>
<body>
<div class="document" id="efficient-live-full-disk-backup">
<h1 class="title">Efficient live full disk backup</h1>

<div class="contents topic" id="contents">
<p class="topic-title">Contents</p>
<ul class="simple">
<li><p><a class="reference internal" href="#overview" id="id1">Overview</a></p></li>
<li><p><a class="reference internal" href="#two-kinds-of-backup-push-and-pull" id="id2">Two kinds of backup: &quot;push&quot; and &quot;pull&quot;</a></p></li>
<li><p><a class="reference internal" href="#full-disk-backup-using-push-mode" id="id3">Full disk backup using &quot;push&quot; mode</a></p></li>
<li><p><a class="reference internal" href="#full-backup-with-older-libvirt-versions" id="id4">Full backup with older libvirt versions</a></p></li>
</ul>
</div>
<div class="section" id="overview">
<h1><a class="toc-backref" href="#id1">Overview</a></h1>
<p>Live full disk backups are preferred in many scenarios, <em>despite</em> their
space requirements.  The following outlines an efficient method to do
that using libvirt's APIs.  This method involves concepts: the notion of
<a class="reference external" href="https://libvirt.org/kbase/backing_chains.html">backing chains</a>,
<a class="reference external" href="https://qemu.readthedocs.io/en/latest/interop/live-block-operations.html#disk-image-backing-chain-notation">QCOW2 overlays</a>,
and a special operation called &quot;active block-commit&quot;, which allows
live-merging an overlay disk image into its backing file.</p>
</div>
<div class="section" id="two-kinds-of-backup-push-and-pull">
<h1><a class="toc-backref" href="#id2">Two kinds of backup: &quot;push&quot; and &quot;pull&quot;</a></h1>
<p>QEMU and libvirt combine the concept of <a class="reference external" href="https://qemu-project.gitlab.io/qemu/interop/bitmaps.html">bitmaps</a> and network
block device (NBD) to allow copying out modified data blocks.  There are
two approaches to it:  In the first, &quot;push mode&quot;, when a user requests
for it, libvirt creates a full backup in an external location (i.e.
libvirt &quot;pushes&quot; the data to the target).</p>
<p>In the other, &quot;pull mode&quot;, libvirt (in coordination with QEMU) exposes
the data that needs to be written out and allows a third-party tool to
copy them out reliably (i.e. the data is being &quot;pulled&quot; from libvirt).
The pull-based backup provides more flexibility by letting an external
tool fetch the modified bits as it sees fit, rather than waiting on
libvirt to push out a full backup to a target location.</p>
<p>The push- and pull-mode techniques also apply for differential backups
(it also includes incremental backups), which track what has changed
since <em>any</em> given backup.</p>
<p>This document covers only the full backups using the &quot;push&quot; mode.</p>
</div>
<div class="section" id="full-disk-backup-using-push-mode">
<h1><a class="toc-backref" href="#id3">Full disk backup using &quot;push&quot; mode</a></h1>
<p>The below approach uses the modern backup API, virDomainBackupBegin().
This requires libvirt-7.2.0 and QEMU-4.2, or higher versions.</p>
<ol class="arabic">
<li><p>Start the guest:</p>
<pre class="literal-block">$&gt; virsh start vm1
Domain 'vm1' started</pre>
</li>
<li><p>Enumerate the disk(s) in use:</p>
<pre class="literal-block">$&gt; virsh domblklist vm1
 Target   Source
--------------------------------------
 vda      /var/lib/libvirt/images/vm1.qcow2</pre>
</li>
<li><p>Begin the backup:</p>
<pre class="literal-block">$&gt; virsh backup-begin vm1
Backup started</pre>
</li>
<li><p>Check the job status (&quot;None&quot; means the job has likely completed):</p>
<pre class="literal-block">$&gt; virsh domjobinfo vm1
Job type:         None</pre>
</li>
<li><p>Check the completed job status:</p>
<pre class="literal-block">$&gt; virsh domjobinfo vm1 --completed
Job type:         Completed
Operation:        Backup
Time elapsed:     183          ms
File processed:   39.250 MiB
File remaining:   0.000 B
File total:       39.250 MiB</pre>
</li>
<li><p>Now we see the copy of the backup:</p>
<pre class="literal-block">$&gt; ls -lash /var/lib/libvirt/images/vm1.qcow2*
15M -rw-r--r--. 1 qemu qemu 15M May 10 12:22 vm1.qcow2
21M -rw-------. 1 root root 21M May 10 12:23 vm1.qcow2.1620642185</pre>
</li>
</ol>
</div>
<div class="section" id="full-backup-with-older-libvirt-versions">
<h1><a class="toc-backref" href="#id4">Full backup with older libvirt versions</a></h1>
<p>This is the alternative in case you cannot use libvirt-7.2.0 and
QEMU-4.2 for some reason.  But this assumes you're using <em>at least</em> QEMU
2.1 and libvirt-1.2.9.</p>
<p>This backup approach is slightly more involved, and predates the
virDomainBackupBegin() API: Assuming a guest with a single disk image,
create a temporary live QCOW2 overlay (commonly called as &quot;external
snapshot&quot;) to track the live guest writes.  Then backup the original
disk image while the guest (live QEMU) keeps writing to the temporary
overlay.  Finally, perform the &quot;active block-commit&quot; operation to
live-merge the temporary overlay disk contents into the original image —
i.e. the backing file — and &quot;pivot&quot; the live QEMU process to point to
it.</p>
<ol class="arabic">
<li><p>Start with a guest with a single disk image, <span class="docutils literal">base.raw</span>, which is
where the live QEMU is pointing at, and recording the guest writes:</p>
<pre class="literal-block">base.raw (live QEMU)</pre>
</li>
<li><p>List the current block device(s) in use:</p>
<pre class="literal-block">$ virsh domblklist vm1
Target     Source
------------------------------------------------
vda        /var/lib/libvirt/images/base.raw</pre>
</li>
<li><p>Create the live &quot;external disk snapshot&quot; (or more correctly, &quot;an
overlay&quot;):</p>
<pre class="literal-block">$ virsh snapshot-create-as --domain vm1 overlay1 \
    --diskspec vda,file=/var/lib/libvirt/images/overlay1.qcow2 \
    --disk-only</pre>
<p>The disk image chain looks as follows:</p>
<pre class="literal-block">base.raw &lt;-- overlay1.qcow2 (live QEMU)</pre>
</li>
</ol>
<blockquote>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Above, if you have QEMU guest agent installed in your virtual
machine, use the <span class="docutils literal"><span class="pre">--quiesce</span></span> option with <span class="docutils literal">virsh <span class="pre">snapshot-create-as</span> <span class="pre">[...]</span></span> to ensure you have a consistent disk
state.</p>
<p>Optionally, you can also supply the <span class="docutils literal"><span class="pre">--no-metadata</span></span> option to
<span class="docutils literal">virsh <span class="pre">snapshot-create-as</span></span> to tell libvirt not track the snapshot
metadata.  Otherwise, when you decide to merge snapshot overlays,
you have to explicitly clean the libvirt metadata using <span class="docutils literal">virsh <span class="pre">snapshot-delete</span> vm1 <span class="pre">--metadata</span> <span class="pre">[name|--current]</span></span>.</p>
</div>
</blockquote>
<ol class="arabic">
<li><p>Now, take a backup the original image, <span class="docutils literal">base.raw</span>, to a different
location using <span class="docutils literal">cp</span> or <span class="docutils literal">rsync</span>:</p>
<pre class="literal-block">$ cp /var/lib/libvirt/images/base.raw
    /export/backups/copy1_base.raw

# Or:

$ rsync -avhW --progress /var/lib/libvirt/images/base.raw \
    /export/backups/copy1_base.raw</pre>
</li>
<li><p>Enumerate the current block device(s) in use, again.  Notice that the
current disk image in use is the above-created overlay,
<span class="docutils literal">overlay1.qcow2</span>:</p>
<pre class="literal-block">$ virsh domblklist vm1
Target     Source
------------------------------------------------
vda        vda,file=/var/lib/libvirt/images/overlay1.qcow2</pre>
</li>
<li><p>Once the backup of the original image completes, now perform the
&quot;active block-commit&quot; to live-merge the contents of
<span class="docutils literal">overlay1.qcow2</span> into <span class="docutils literal">base.raw</span> <em>and</em> pivot the live QEMU back
to the original:</p>
<pre class="literal-block">$ virsh blockcommit vm1 vda --active --verbose --pivot</pre>
</li>
<li><p>After the above operation completes, again list the current block
device(s) in use.  And notice that the live QEMU is now writing to
the original base image:</p>
<pre class="literal-block">$ virsh domblklist vm1
Target     Source
------------------------------------------------
vda        /var/lib/libvirt/images/base.raw</pre>
</li>
</ol>
<p>The final updated disk image &quot;chain&quot; will be a single consolidated
disk:</p>
<pre class="literal-block">[base.raw] (live QEMU)</pre>
<p>Now you can safely <strong>discard the overlay image</strong>, <span class="docutils literal">overlay1.qcow2</span> —
it is no longer valid; and its contents are now fully merged into the
base image.</p>
</div>
</div>
</body>
</html>
