<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta charset="utf-8"/>
<meta name="generator" content="Docutils 0.16: http://docutils.sourceforge.net/" />
<title>qemu-migration.rst</title>

</head>
<body>
<div class="document">


<div class="section" id="qemu-migration-phases">
<h1><a class="toc-backref" href="#id1">QEMU Migration Phases</a></h1>
<div class="contents topic" id="contents">
<p class="topic-title">Contents</p>
<ul class="simple">
<li><p><a class="reference internal" href="#qemu-migration-phases" id="id1">QEMU Migration Phases</a></p>
<ul>
<li><p><a class="reference internal" href="#migration-protocol-v2-api-sequence" id="id2">Migration protocol v2 API Sequence</a></p></li>
<li><p><a class="reference internal" href="#migration-protocol-v3-api-sequence" id="id3">Migration protocol v3 API Sequence</a></p></li>
</ul>
</li>
<li><p><a class="reference internal" href="#qemu-migration-locking-rules" id="id4">QEMU Migration Locking Rules</a></p></li>
</ul>
</div>
<p>QEMU supports only migration protocols 2 and 3 (1 was lacking too many
steps).  Repeating the protocol sequences from libvirt.c:</p>
<div class="section" id="migration-protocol-v2-api-sequence">
<h2><a class="toc-backref" href="#id2">Migration protocol v2 API Sequence</a></h2>
<blockquote>
<dl class="simple">
<dt><strong>Src</strong>: <span class="docutils literal">DumpXML</span></dt>
<dd><ul class="simple">
<li><p>Generate XML to pass to dst</p></li>
</ul>
</dd>
<dt><strong>Dst</strong>: <span class="docutils literal">Prepare</span></dt>
<dd><ul class="simple">
<li><p>Get ready to accept incoming VM</p></li>
<li><p>Generate optional cookie to pass to src</p></li>
</ul>
</dd>
<dt><strong>Src</strong>: <span class="docutils literal">Perform</span></dt>
<dd><ul class="simple">
<li><p>Start migration and wait for send completion</p></li>
<li><p>Kill off VM if successful, resume if failed</p></li>
</ul>
</dd>
<dt><strong>Dst</strong>: <span class="docutils literal">Finish</span></dt>
<dd><ul class="simple">
<li><p>Wait for recv completion and check status</p></li>
<li><p>Kill off VM if unsuccessful</p></li>
</ul>
</dd>
</dl>
</blockquote>
</div>
<div class="section" id="migration-protocol-v3-api-sequence">
<h2><a class="toc-backref" href="#id3">Migration protocol v3 API Sequence</a></h2>
<blockquote>
<dl class="simple">
<dt><strong>Src</strong>: <span class="docutils literal">Begin</span></dt>
<dd><ul class="simple">
<li><p>Generate XML to pass to dst</p></li>
<li><p>Generate optional cookie to pass to dst</p></li>
</ul>
</dd>
<dt><strong>Dst</strong>: <span class="docutils literal">Prepare</span></dt>
<dd><ul class="simple">
<li><p>Get ready to accept incoming VM</p></li>
<li><p>Generate optional cookie to pass to src</p></li>
</ul>
</dd>
<dt><strong>Src</strong>: <span class="docutils literal">Perform</span></dt>
<dd><ul class="simple">
<li><p>Start migration and wait for send completion</p></li>
<li><p>Generate optional cookie to pass to dst</p></li>
</ul>
</dd>
<dt><strong>Dst</strong>: <span class="docutils literal">Finish</span></dt>
<dd><ul class="simple">
<li><p>Wait for recv completion and check status</p></li>
<li><p>Kill off VM if failed, resume if success</p></li>
<li><p>Generate optional cookie to pass to src</p></li>
</ul>
</dd>
<dt><strong>Src</strong>: <span class="docutils literal">Confirm</span></dt>
<dd><ul class="simple">
<li><p>Kill off VM if success, resume if failed</p></li>
</ul>
</dd>
</dl>
</blockquote>
</div>
</div>
<div class="section" id="qemu-migration-locking-rules">
<h1><a class="toc-backref" href="#id4">QEMU Migration Locking Rules</a></h1>
<p>Migration is a complicated beast which may span across several APIs on both
source and destination side and we need to keep the domain we are migrating in
a consistent state during the whole process.</p>
<p>To avoid anyone from changing the domain in the middle of migration we need to
keep <span class="docutils literal">MIGRATION_OUT</span> job active during migration from <span class="docutils literal">Begin</span> to
<span class="docutils literal">Confirm</span> on the source side and <span class="docutils literal">MIGRATION_IN</span> job has to be active from
<span class="docutils literal">Prepare</span> to <span class="docutils literal">Finish</span> on the destination side.</p>
<p>For this purpose we introduce several helper methods to deal with locking
primitives (described in <a class="reference external" href="qemu-threads.html">qemu-threads</a>) in the right way:</p>
<ul class="simple">
<li><p><span class="docutils literal">qemuMigrationJobStart</span></p></li>
<li><p><span class="docutils literal">qemuMigrationJobContinue</span></p></li>
<li><p><span class="docutils literal">qemuMigrationJobStartPhase</span></p></li>
<li><p><span class="docutils literal">qemuMigrationJobSetPhase</span></p></li>
<li><p><span class="docutils literal">qemuMigrationJobFinish</span></p></li>
</ul>
<p>The sequence of calling <span class="docutils literal">qemuMigrationJob*</span> helper methods is as follows:</p>
<ul>
<li><p>The first API of a migration protocol (<span class="docutils literal">Prepare</span> or <span class="docutils literal">Perform/Begin</span>
depending on migration type and version) has to start migration job and keep
it active:</p>
<pre class="literal-block">qemuMigrationJobStart(driver, vm, VIR_JOB_MIGRATION_{IN,OUT});
qemuMigrationJobSetPhase(vm, QEMU_MIGRATION_PHASE_*);
...do work...
qemuMigrationJobContinue(vm);</pre>
</li>
<li><p>All consequent phases except for the last one have to keep the job active:</p>
<pre class="literal-block">if (!qemuMigrationJobIsActive(vm, VIR_JOB_MIGRATION_{IN,OUT}))
    return;
qemuMigrationJobStartPhase(driver, vm, QEMU_MIGRATION_PHASE_*);
...do work...
qemuMigrationJobContinue(vm);</pre>
</li>
<li><p>The last migration phase finally finishes the migration job:</p>
<pre class="literal-block">if (!qemuMigrationJobIsActive(vm, VIR_JOB_MIGRATION_{IN,OUT}))
    return;
qemuMigrationJobStartPhase(driver, vm, QEMU_MIGRATION_PHASE_*);
...do work...
qemuMigrationJobFinish(vm);</pre>
</li>
</ul>
<p>While migration job is running (i.e., after <span class="docutils literal">qemuMigrationJobStart*</span> but before
<span class="docutils literal">qemuMigrationJob{Continue,Finish}</span>), migration phase can be advanced using:</p>
<pre class="literal-block">qemuMigrationJobSetPhase(vm, QEMU_MIGRATION_PHASE_*);</pre>
</div>
</div>
</body>
</html>
