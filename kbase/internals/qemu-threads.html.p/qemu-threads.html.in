<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta charset="utf-8"/>
<meta name="generator" content="Docutils 0.16: http://docutils.sourceforge.net/" />
<title>QEMU Driver Threading: The Rules</title>

</head>
<body>
<div class="document" id="qemu-driver-threading-the-rules">
<h1 class="title">QEMU Driver Threading: The Rules</h1>

<div class="contents topic" id="contents">
<p class="topic-title">Contents</p>
<ul class="simple">
<li><p><a class="reference internal" href="#basic-locking-primitives" id="id1">Basic locking primitives</a></p></li>
<li><p><a class="reference internal" href="#helper-methods" id="id2">Helper methods</a></p></li>
<li><p><a class="reference internal" href="#design-patterns" id="id3">Design patterns</a></p></li>
</ul>
</div>
<p>This document describes how thread safety is ensured throughout
the QEMU driver. The criteria for this model are:</p>
<blockquote>
<ul class="simple">
<li><p>Objects must never be exclusively locked for any prolonged time</p></li>
<li><p>Code which sleeps must be able to time out after suitable period</p></li>
<li><p>Must be safe against dispatch of asynchronous events from monitor</p></li>
</ul>
</blockquote>
<div class="section" id="basic-locking-primitives">
<h1><a class="toc-backref" href="#id1">Basic locking primitives</a></h1>
<p>There are a number of locks on various objects</p>
<blockquote>
<p><span class="docutils literal">virQEMUDriver</span></p>
<blockquote>
<p>The <span class="docutils literal">qemu_conf.h</span> file has inline comments describing the locking
needs for each field. Any field marked immutable, self-locking
can be accessed without the driver lock. For other fields there
are typically helper APIs in <span class="docutils literal">qemu_conf.c</span> that provide serialized
access to the data. No code outside <span class="docutils literal">qemu_conf.c</span> should ever
acquire this lock</p>
</blockquote>
<p><span class="docutils literal">virDomainObj</span></p>
<blockquote>
<p>Will be locked and the reference counter will be increased after calling
any of the <span class="docutils literal">virDomainObjListFindBy{ID,Name,UUID}</span> methods. The preferred way
of decrementing the reference counter and unlocking the domain is using the
<span class="docutils literal">virDomainObjEndAPI()</span> function.</p>
<p>Lock must be held when changing/reading any variable in the <span class="docutils literal">virDomainObj</span></p>
<p>This lock must not be held for anything which sleeps/waits (i.e. monitor
commands).</p>
</blockquote>
<p><span class="docutils literal">qemuMonitorPrivatePtr</span> job conditions</p>
<blockquote>
<p>Since <span class="docutils literal">virDomainObj</span> lock must not be held during sleeps, the job
conditions provide additional protection for code making updates.</p>
<p>QEMU driver uses three kinds of job conditions: asynchronous, agent
and normal.</p>
<p>Asynchronous job condition is used for long running jobs (such as
migration) that consist of several monitor commands and it is
desirable to allow calling a limited set of other monitor commands
while such job is running.  This allows clients to, e.g., query
statistical data, cancel the job, or change parameters of the job.</p>
<p>Normal job condition is used by all other jobs to get exclusive
access to the monitor and also by every monitor command issued by an
asynchronous job.  When acquiring normal job condition, the job must
specify what kind of action it is about to take and this is checked
against the allowed set of jobs in case an asynchronous job is
running.  If the job is incompatible with current asynchronous job,
it needs to wait until the asynchronous job ends and try to acquire
the job again.</p>
<p>Agent job condition is then used when thread wishes to talk to qemu
agent monitor. It is possible to acquire just agent job
(<span class="docutils literal">qemuDomainObjBeginAgentJob</span>), or only normal job (<span class="docutils literal">qemuDomainObjBeginJob</span>)
but not both at the same time. Holding an agent job and a normal job would
allow an unresponsive or malicious agent to block normal libvirt API and
potentially result in a denial of service. Which type of job to grab
depends whether caller wishes to communicate only with agent socket, or
only with qemu monitor socket.</p>
<p>Immediately after acquiring the <span class="docutils literal">virDomainObj</span> lock, any method
which intends to update state must acquire asynchronous, normal or
agent job . The <span class="docutils literal">virDomainObj</span> lock is released while blocking on
these condition variables.  Once the job condition is acquired, a
method can safely release the <span class="docutils literal">virDomainObj</span> lock whenever it hits
a piece of code which may sleep/wait, and re-acquire it after the
sleep/wait.  Whenever an asynchronous job wants to talk to the
monitor, it needs to acquire nested job (a special kind of normal
job) to obtain exclusive access to the monitor.</p>
<p>Since the <span class="docutils literal">virDomainObj</span> lock was dropped while waiting for the
job condition, it is possible that the domain is no longer active
when the condition is finally obtained.  The monitor lock is only
safe to grab after verifying that the domain is still active.</p>
</blockquote>
<p><span class="docutils literal">qemuMonitor</span> mutex</p>
<blockquote>
<p>Lock to be used when invoking any monitor command to ensure safety
wrt any asynchronous events that may be dispatched from the monitor.
It should be acquired before running a command.</p>
<p>The job condition <em>MUST</em> be held before acquiring the monitor lock</p>
<p>The <span class="docutils literal">virDomainObj</span> lock <em>MUST</em> be held before acquiring the monitor
lock.</p>
<p>The <span class="docutils literal">virDomainObj</span> lock <em>MUST</em> then be released when invoking the
monitor command.</p>
</blockquote>
</blockquote>
</div>
<div class="section" id="helper-methods">
<h1><a class="toc-backref" href="#id2">Helper methods</a></h1>
<p>To lock the <span class="docutils literal">virDomainObj</span></p>
<blockquote>
<dl class="simple">
<dt><span class="docutils literal">virObjectLock()</span></dt>
<dd><ul class="simple">
<li><p>Acquires the <span class="docutils literal">virDomainObj</span> lock</p></li>
</ul>
</dd>
<dt><span class="docutils literal">virObjectUnlock()</span></dt>
<dd><ul class="simple">
<li><p>Releases the <span class="docutils literal">virDomainObj</span> lock</p></li>
</ul>
</dd>
</dl>
</blockquote>
<p>To acquire the normal job condition</p>
<blockquote>
<dl class="simple">
<dt><span class="docutils literal">qemuDomainObjBeginJob()</span></dt>
<dd><ul class="simple">
<li><p>Waits until the job is compatible with current async job or no
async job is running</p></li>
<li><p>Waits for <span class="docutils literal">job.cond</span> condition <span class="docutils literal">job.active != 0</span> using <span class="docutils literal">virDomainObj</span>
mutex</p></li>
<li><p>Rechecks if the job is still compatible and repeats waiting if it
isn't</p></li>
<li><p>Sets <span class="docutils literal">job.active</span> to the job type</p></li>
</ul>
</dd>
<dt><span class="docutils literal">qemuDomainObjEndJob()</span></dt>
<dd><ul class="simple">
<li><p>Sets job.active to 0</p></li>
<li><p>Signals on job.cond condition</p></li>
</ul>
</dd>
</dl>
</blockquote>
<p>To acquire the agent job condition</p>
<blockquote>
<dl class="simple">
<dt><span class="docutils literal">qemuDomainObjBeginAgentJob()</span></dt>
<dd><ul class="simple">
<li><p>Waits until there is no other agent job set</p></li>
<li><p>Sets <span class="docutils literal">job.agentActive</span> to the job type</p></li>
</ul>
</dd>
<dt><span class="docutils literal">qemuDomainObjEndAgentJob()</span></dt>
<dd><ul class="simple">
<li><p>Sets <span class="docutils literal">job.agentActive</span> to 0</p></li>
<li><p>Signals on <span class="docutils literal">job.cond</span> condition</p></li>
</ul>
</dd>
</dl>
</blockquote>
<p>To acquire the asynchronous job condition</p>
<blockquote>
<dl class="simple">
<dt><span class="docutils literal">qemuDomainObjBeginAsyncJob()</span></dt>
<dd><ul class="simple">
<li><p>Waits until no async job is running</p></li>
<li><p>Waits for <span class="docutils literal">job.cond</span> condition <span class="docutils literal">job.active != 0</span> using <span class="docutils literal">virDomainObj</span>
mutex</p></li>
<li><p>Rechecks if any async job was started while waiting on <span class="docutils literal">job.cond</span>
and repeats waiting in that case</p></li>
<li><p>Sets <span class="docutils literal">job.asyncJob</span> to the asynchronous job type</p></li>
</ul>
</dd>
<dt><span class="docutils literal">qemuDomainObjEndAsyncJob()</span></dt>
<dd><ul class="simple">
<li><p>Sets <span class="docutils literal">job.asyncJob</span> to 0</p></li>
<li><p>Broadcasts on <span class="docutils literal">job.asyncCond</span> condition</p></li>
</ul>
</dd>
</dl>
</blockquote>
<p>To acquire the QEMU monitor lock</p>
<blockquote>
<dl class="simple">
<dt><span class="docutils literal">qemuDomainObjEnterMonitor()</span></dt>
<dd><ul class="simple">
<li><p>Acquires the <span class="docutils literal">qemuMonitorObj</span> lock</p></li>
<li><p>Releases the <span class="docutils literal">virDomainObj</span> lock</p></li>
</ul>
</dd>
<dt><span class="docutils literal">qemuDomainObjExitMonitor()</span></dt>
<dd><ul class="simple">
<li><p>Releases the <span class="docutils literal">qemuMonitorObj</span> lock</p></li>
<li><p>Acquires the <span class="docutils literal">virDomainObj</span> lock</p></li>
</ul>
</dd>
</dl>
<p>These functions must not be used by an asynchronous job.</p>
</blockquote>
<p>To acquire the QEMU monitor lock as part of an asynchronous job</p>
<blockquote>
<dl class="simple">
<dt><span class="docutils literal">qemuDomainObjEnterMonitorAsync()</span></dt>
<dd><ul class="simple">
<li><p>Validates that the right async job is still running</p></li>
<li><p>Acquires the <span class="docutils literal">qemuMonitorObj</span> lock</p></li>
<li><p>Releases the <span class="docutils literal">virDomainObj</span> lock</p></li>
<li><p>Validates that the VM is still active</p></li>
</ul>
</dd>
<dt>qemuDomainObjExitMonitor()</dt>
<dd><ul class="simple">
<li><p>Releases the <span class="docutils literal">qemuMonitorObj</span> lock</p></li>
<li><p>Acquires the <span class="docutils literal">virDomainObj</span> lock</p></li>
</ul>
</dd>
</dl>
<p>These functions are for use inside an asynchronous job; the caller
must check for a return of -1 (VM not running, so nothing to exit).
Helper functions may also call this with <span class="docutils literal">VIR_ASYNC_JOB_NONE</span> when
used from a sync job (such as when first starting a domain).</p>
</blockquote>
<p>To keep a domain alive while waiting on a remote command</p>
<blockquote>
<dl class="simple">
<dt><span class="docutils literal">qemuDomainObjEnterRemote()</span></dt>
<dd><ul class="simple">
<li><p>Releases the <span class="docutils literal">virDomainObj</span> lock</p></li>
</ul>
</dd>
<dt><span class="docutils literal">qemuDomainObjExitRemote()</span></dt>
<dd><ul class="simple">
<li><p>Acquires the <span class="docutils literal">virDomainObj</span> lock</p></li>
</ul>
</dd>
</dl>
</blockquote>
</div>
<div class="section" id="design-patterns">
<h1><a class="toc-backref" href="#id3">Design patterns</a></h1>
<blockquote>
<ul>
<li><p>Accessing something directly to do with a <span class="docutils literal">virDomainObj</span>:</p>
<pre class="literal-block">virDomainObj *obj;

obj = qemuDomObjFromDomain(dom);

...do work...

virDomainObjEndAPI(&amp;obj);</pre>
</li>
<li><p>Updating something directly to do with a <span class="docutils literal">virDomainObj</span>:</p>
<pre class="literal-block">virDomainObj *obj;

obj = qemuDomObjFromDomain(dom);

qemuDomainObjBeginJob(obj, VIR_JOB_TYPE);

...do work...

qemuDomainObjEndJob(obj);

virDomainObjEndAPI(&amp;obj);</pre>
</li>
<li><p>Invoking a monitor command on a <span class="docutils literal">virDomainObj</span>:</p>
<pre class="literal-block">virDomainObj *obj;
qemuDomainObjPrivate *priv;

obj = qemuDomObjFromDomain(dom);

qemuDomainObjBeginJob(obj, VIR_JOB_TYPE);

...do prep work...

if (virDomainObjIsActive(vm)) {
    qemuDomainObjEnterMonitor(obj);
    qemuMonitorXXXX(priv-&gt;mon);
    qemuDomainObjExitMonitor(obj);
}

...do final work...

qemuDomainObjEndJob(obj);
virDomainObjEndAPI(&amp;obj);</pre>
</li>
<li><p>Invoking an agent command on a <span class="docutils literal">virDomainObj</span>:</p>
<pre class="literal-block">virDomainObj *obj;
qemuAgent *agent;

obj = qemuDomObjFromDomain(dom);

qemuDomainObjBeginAgentJob(obj, VIR_AGENT_JOB_TYPE);

...do prep work...

if (!qemuDomainAgentAvailable(obj, true))
    goto cleanup;

agent = qemuDomainObjEnterAgent(obj);
qemuAgentXXXX(agent, ..);
qemuDomainObjExitAgent(obj, agent);

...do final work...

qemuDomainObjEndAgentJob(obj);
virDomainObjEndAPI(&amp;obj);</pre>
</li>
<li><p>Running asynchronous job:</p>
<pre class="literal-block">virDomainObj *obj;
qemuDomainObjPrivate *priv;

obj = qemuDomObjFromDomain(dom);

qemuDomainObjBeginAsyncJob(obj, VIR_ASYNC_JOB_TYPE);
qemuDomainObjSetAsyncJobMask(obj, allowedJobs);

...do prep work...

if (qemuDomainObjEnterMonitorAsync(driver, obj,
                                   VIR_ASYNC_JOB_TYPE) &lt; 0) {
    /* domain died in the meantime */
    goto error;
}
...start qemu job...
qemuDomainObjExitMonitor(obj);

while (!finished) {
    if (qemuDomainObjEnterMonitorAsync(driver, obj,
                                       VIR_ASYNC_JOB_TYPE) &lt; 0) {
        /* domain died in the meantime */
        goto error;
    }
    ...monitor job progress...
    qemuDomainObjExitMonitor(obj);

    virObjectUnlock(obj);
    sleep(aWhile);
    virObjectLock(obj);
}

...do final work...

qemuDomainObjEndAsyncJob(obj);
virDomainObjEndAPI(&amp;obj);</pre>
</li>
<li><p>Coordinating with a remote server for migration:</p>
<pre class="literal-block">virDomainObj *obj;
qemuDomainObjPrivate *priv;

obj = qemuDomObjFromDomain(dom);

qemuDomainObjBeginAsyncJob(obj, VIR_ASYNC_JOB_TYPE);

...do prep work...

if (virDomainObjIsActive(vm)) {
    qemuDomainObjEnterRemote(obj);
    ...communicate with remote...
    qemuDomainObjExitRemote(obj);
    /* domain may have been stopped while we were talking to remote */
    if (!virDomainObjIsActive(vm)) {
        qemuReportError(VIR_ERR_INTERNAL_ERROR, &quot;%s&quot;,
                        _(&quot;guest unexpectedly quit&quot;));
    }
}

...do final work...

qemuDomainObjEndAsyncJob(obj);
virDomainObjEndAPI(&amp;obj);</pre>
</li>
</ul>
</blockquote>
</div>
</div>
</body>
</html>
