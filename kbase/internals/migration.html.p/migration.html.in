<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta charset="utf-8"/>
<meta name="generator" content="Docutils 0.16: http://docutils.sourceforge.net/" />
<title>Libvirt migration internals</title>

</head>
<body>
<div class="document" id="libvirt-migration-internals">
<h1 class="title">Libvirt migration internals</h1>

<div class="contents topic" id="contents">
<p class="topic-title">Contents</p>
<ul class="simple">
<li><p><a class="reference internal" href="#migration-protocol" id="id1">Migration protocol</a></p>
<ul>
<li><p><a class="reference internal" href="#version-3-protocol-sequence" id="id2">Version 3 protocol sequence</a></p></li>
</ul>
</li>
<li><p><a class="reference internal" href="#virsh-migrate-entry-point" id="id3">&quot;virsh migrate&quot; entry point</a></p>
<ul>
<li><p><a class="reference internal" href="#virdomainmigrate3-function" id="id4">virDomainMigrate3 function</a></p></li>
<li><p><a class="reference internal" href="#virdomainmigratetouri3-function" id="id5">virDomainMigrateToURI3 function</a></p></li>
</ul>
</li>
<li><p><a class="reference internal" href="#qemu-driver-specifics" id="id6">QEMU driver specifics</a></p></li>
</ul>
</div>
<p>Migration is a multi-step operation with at least two distinct actors,
the source and the destination libvirtd daemons, and a lot of failure
points. This document describes the basic migration workflow in the
code level, as a way to complement <a class="reference external" href="../../migration.html">the base migration docs</a>
and help developers to get up to speed quicker with the code.</p>
<p>In this document, unless stated otherwise, these conventions are followed:</p>
<ul class="simple">
<li><p>'user' refers to any entity that initiates a migration, regardless of being
an human using 'virsh' or a program consuming the Libvirt API;</p></li>
<li><p>'source' refers to the source host of the migration, where the guest currently
exists;</p></li>
<li><p>'destination' refers to the destination host of the migration;</p></li>
<li><p>'libvirt client' refers to the Libvirt client process that controls the
migration flow, e.g. virsh. Note that this client process can reside in
any host;</p></li>
<li><p>'regular migration' refers to any migration operation where the libvirt
client coordinates the communication between the libvirtd instances in
the source and destination hosts.</p></li>
</ul>
<div class="section" id="migration-protocol">
<h1><a class="toc-backref" href="#id1">Migration protocol</a></h1>
<p>Libvirt works with three migrations protocols. Preference is given to
protocol version 3, falling back to older versions if source and destination
can't handle version 3. Version 3 has been around since at least 2014, when
virDomainMigrate3 was moved to libvirt-domain.c by commit 67c08fccdcad,
meaning that it's safe to assume that users today are capable of always running
this protocol.</p>
<div class="section" id="version-3-protocol-sequence">
<h2><a class="toc-backref" href="#id2">Version 3 protocol sequence</a></h2>
<p>The sequence of events in the migration protocol version 3, considering a
regular migration, is:</p>
<p>1) in the source, generate the domain XML to pass to the destination. This
step is called &quot;Begin&quot;;</p>
<p>2) in the destination, prepare the host to accept the incoming VM from the
source. This step is called &quot;Prepare&quot;;</p>
<p>3) the source then starts the migration of the guest and waits for completion.
This is called &quot;Perform&quot;;</p>
<p>4) destination waits for the migration to be completed, checking if it was successful
or not. The guest is killed in case of failure. This step is called &quot;Finish&quot;;</p>
<p>5) the source checks the results of the migration process, killing the guest
if successful or resuming it if it failed. This is called &quot;Confirm&quot;.</p>
<p>In steps 1, 2, 3 and 4, an optional migration cookie can be generated and passed
to source or destination. This cookie contains extra information that informs
about extra settings or configuration required during the process.</p>
<p>The name of each step and the version of the protocol is used to name the driver
interfaces that implements the logic. The steps above are implemented by the
following interfaces:</p>
<ol class="arabic simple">
<li><p>Begin version 3:  <span class="docutils literal">domainMigrateBegin3()</span> and <span class="docutils literal">domainMigrateBegin3Params()</span></p></li>
<li><p>Prepare version 3: <span class="docutils literal">domainMigratePrepare3()</span> and <span class="docutils literal">domainMigratePrepare3Params()</span></p></li>
<li><p>Perform version 3: <span class="docutils literal">domainMigratePerform3()</span> and <span class="docutils literal">domainMigratePerform3Params()</span></p></li>
<li><p>Finish version 3: <span class="docutils literal">domainMigrateFinish3()</span> and <span class="docutils literal">domainMigrateFinish3Params()</span></p></li>
<li><p>Confirm version 3: <span class="docutils literal">domainMigrateConfirm3()</span> and <span class="docutils literal">domainMigrateConfirm3Params()</span></p></li>
</ol>
</div>
</div>
<div class="section" id="virsh-migrate-entry-point">
<h1><a class="toc-backref" href="#id3">&quot;virsh migrate&quot; entry point</a></h1>
<p>When an user executes a &quot;virsh migrate&quot; command, virsh-domain.c calls <span class="docutils literal">cmdMigrate()</span>.
A virThread is created with the <span class="docutils literal">doMigrate</span> worker. After validation of flags and
parameters, one of these functions will be executed:</p>
<ul class="simple">
<li><p>if <span class="docutils literal">VIR_MIGRATE_PEER2PEER</span> is set (i.e. --p2p was passed to virsh migrate), or
--direct was passed as parameter, <span class="docutils literal">virDomainMigrateToURI3()</span> is called;</p></li>
<li><p>for all other cases, regular migration is assumed and execution goes
to <span class="docutils literal">virDomainMigrate3()</span>.</p></li>
</ul>
<div class="section" id="virdomainmigrate3-function">
<h2><a class="toc-backref" href="#id4">virDomainMigrate3 function</a></h2>
<p><span class="docutils literal">virDomainMigrate3()</span> overall logic is:</p>
<ul class="simple">
<li><p>if VIR_MIGRATE_PEER2PEER is set, error out and tell the user that this case must
be handled via <span class="docutils literal">virDomainMigrateToURI3()</span></p></li>
<li><p>if VIR_MIGRATE_OFFLINE is set, check if both source and destination supports it;</p></li>
<li><p>VIR_MIGRATE_CHANGE_PROTECTION is set, check if the source host supports it;</p></li>
<li><p>check if the source and the destination driver supports VIR_DRV_FEATURE_MIGRATION_PARAMS.
In this case, forward execution to <span class="docutils literal">virDomainMigrateVersion3Params()</span>;</p></li>
<li><p>proceed to check for a suitable migration protocol in both source and destination
drivers. The preference is to use migration protocol v3, via
<span class="docutils literal">virDomainMigrateVersion3()</span>, falling back to older versions if needed.</p></li>
</ul>
<p>Both <span class="docutils literal">virDomainMigrateVersion3()</span> and <span class="docutils literal">virDomainMigrateVersion3Params()</span>
are wrappers of <span class="docutils literal">virDomainMigrateVersion3Full()</span>, where the logic of the
regular migration is executed from step 1 (Begin) to 5 (Confirm).</p>
</div>
<div class="section" id="virdomainmigratetouri3-function">
<h2><a class="toc-backref" href="#id5">virDomainMigrateToURI3 function</a></h2>
<p>While <span class="docutils literal">virDomainMigrate3()</span> handles regular migration cases, <span class="docutils literal">virDomainMigrateToURI3()</span>
takes care of peer-2-peer and direct migration scenarios. The function does flags
validation and then calls <span class="docutils literal">virDomainMigrateUnmanagedParams()</span>. At this point,
more checkings are made and then:</p>
<ul class="simple">
<li><p>if VIR_MIGRATE_PEER2PEER is set and the source supports extensible parameters
(tested via VIR_DRV_FEATURE_MIGRATION_PARAMS support), <span class="docutils literal">domainMigratePerform3Params()</span>
API of the hypervisor driver is called;</p></li>
<li><p>for all other cases, <span class="docutils literal">virDomainMigrateUnmanagedProto3()</span> is called. This function does
additional checkings and then calls <span class="docutils literal">domainMigratePerform3()</span> API of the hypervisor
driver.</p></li>
</ul>
<p>For both cases, the execution ends in the same API that handles the third step (Perform)
of the regular migration sequence. It's up for each hypervisor driver implementation to
differ when the API is being called from a regular or a peer-2-peer/direct migration.</p>
</div>
</div>
<div class="section" id="qemu-driver-specifics">
<h1><a class="toc-backref" href="#id6">QEMU driver specifics</a></h1>
<p>The QEMU driver supports migration protocol version 2 and 3. Here's a list of
version 3 APIs that were discussed in this document that QEMU implements,
which can be found in src/qemu/qemu_driver.c:</p>
<pre class="literal-block">.domainMigrateBegin3 = qemuDomainMigrateBegin3, /* 0.9.2 */
.domainMigratePrepare3 = qemuDomainMigratePrepare3, /* 0.9.2 */
.domainMigratePerform3 = qemuDomainMigratePerform3, /* 0.9.2 */
.domainMigrateFinish3 = qemuDomainMigrateFinish3, /* 0.9.2 */
.domainMigrateConfirm3 = qemuDomainMigrateConfirm3, /* 0.9.2 */

.domainMigrateBegin3Params = qemuDomainMigrateBegin3Params, /* 1.1.0 */
.domainMigratePrepare3Params = qemuDomainMigratePrepare3Params, /* 1.1.0 */
.domainMigratePerform3Params = qemuDomainMigratePerform3Params, /* 1.1.0 */
.domainMigrateFinish3Params = qemuDomainMigrateFinish3Params, /* 1.1.0 */
.domainMigrateConfirm3Params = qemuDomainMigrateConfirm3Params, /* 1.1.0 */</pre>
<p>All implementations have a 'Params' variation that handles the case where the
source and destationation can handle the extensible parameters API
(VIR_DRV_FEATURE_MIGRATION_PARAMS), but both versions calls out the same
inner function:</p>
<ul class="simple">
<li><p><span class="docutils literal">qemuDomainMigrateBegin3()</span> and <span class="docutils literal">qemuDomainMigrateBegin3Params()</span> use
<span class="docutils literal">qemuMigrationSrcBegin()</span>;</p></li>
<li><p><span class="docutils literal">qemuDomainMigratePrepare3()</span> and <span class="docutils literal">qemuDomainMigratePrepare3Params()</span> use
<span class="docutils literal">qemuMigrationDstPrepareDirect()</span>;</p></li>
<li><p><span class="docutils literal">qemuDomainMigratePerform3()</span> and <span class="docutils literal">qemuDomainMigratePerform3Params()</span> use
<span class="docutils literal">qemuMigrationSrcPerform()</span></p></li>
<li><p><span class="docutils literal">qemuDomainMigrateFinish3()</span> and <span class="docutils literal">qemuDomainMigrateFinish3Params()</span> use
<span class="docutils literal">qemuMigrationDstFinish()</span></p></li>
<li><p><span class="docutils literal">qemuDomainMigrateConfirm3()</span> and <span class="docutils literal">qemuDomainMigrateConfirm3Params()</span> use
<span class="docutils literal">qemuMigrationSrcConfirm()</span></p></li>
</ul>
</div>
</div>
</body>
</html>
