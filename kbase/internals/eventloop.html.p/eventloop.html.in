<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta charset="utf-8"/>
<meta name="generator" content="Docutils 0.16: http://docutils.sourceforge.net/" />
<title>Libvirt's event loop</title>

</head>
<body>
<div class="document" id="libvirt-s-event-loop">
<h1 class="title">Libvirt's event loop</h1>

<div class="contents topic" id="contents">
<p class="topic-title">Contents</p>
<ul class="simple">
<li><p><a class="reference internal" href="#event-driven-programming" id="id1">Event driven programming</a></p></li>
<li><p><a class="reference internal" href="#the-event-loop-api" id="id2">The event loop API</a></p></li>
<li><p><a class="reference internal" href="#worker-pool" id="id3">Worker pool</a></p></li>
</ul>
</div>
<p>This page describes the event loop approach used in libvirt. Both server and
client.</p>
<div class="section" id="event-driven-programming">
<h1><a class="toc-backref" href="#id1">Event driven programming</a></h1>
<p>Traditionally, a program simply ran once, then terminated. This type of program
was very common in the early days of computing, and lacked any form of user
interactivity. This is still used frequently, particularly in small one purpose
programs.</p>
<p>However, that approach is not suitable for all the types of applications. For
instance graphical applications spend most of their run time waiting for an
input from user. Only after it happened (in our example a button was clicked, a
key pressed, etc.) an event is generated to which they respond by executing
desired function. If generalized, this is how many long running programs
(daemons) work. Even those who are not waiting for direct user input and have no
graphical interface. Such as Libvirt.</p>
<img alt="event loop" src="../images/event_loop_simple.png" />
<p>In Libvirt this approach is used in combination with <span class="docutils literal">poll(2)</span> as all the
communication with its clients (and domains it manages too) happens through
sockets. Therefore whenever new client connects, it is given exclusive file
descriptor which is then watched for incoming events, e.g. messages.</p>
</div>
<div class="section" id="the-event-loop-api">
<h1><a class="toc-backref" href="#id2">The event loop API</a></h1>
<p>To work with event loop from our code we have plenty of APIs.</p>
<ul class="simple">
<li><p><span class="docutils literal">virEventAddHandle</span>: Registers a callback for monitoring file handle
events.</p></li>
<li><p><span class="docutils literal">virEventUpdateHandle</span>: Change set of events monitored file handle is being
watched for.</p></li>
<li><p><span class="docutils literal">virEventRemoveHandle</span>: Unregisters previously registered file handle so
that it is no longer monitored for any events.</p></li>
<li><p><span class="docutils literal">virEventAddTimeout</span>: Registers a callback for timer event.</p></li>
<li><p><span class="docutils literal">virEventUpdateTimeout</span>: Changes frequency for a timer.</p></li>
<li><p><span class="docutils literal">virEventRemoveTimeout</span>: Unregisters a timer.</p></li>
</ul>
<p>For more information on these APIs continue reading
<a class="reference external" href="../../html/libvirt-libvirt-event.html">here</a>.</p>
</div>
<div class="section" id="worker-pool">
<h1><a class="toc-backref" href="#id3">Worker pool</a></h1>
<p>Looking back at the image above we can see one big limitation. While processing
a message event loop is blocked and for an outside observer unresponsive. This
is not acceptable for Libvirt. Therefore we have came up with the following
solution.</p>
<img alt="event loop" src="../images/event_loop_worker.png" />
<p>The event loop does only necessary minimum and hand over message processing to
another thread. In fact, there can be as many processing threads as configured
increasing processing power.</p>
<p>To break this high level description into smaller pieces, here is what happens
when user calls an API:</p>
<ol class="arabic simple">
<li><p>User (or management application) calls a Libvirt API. Depending on the
connection URI, this may or may not involve server. Well, for the sake of our
demonstration we assume the former.</p></li>
<li><p>Remote driver encodes the API among it's arguments into an <a class="reference external" href="rpc.html">RPC
message</a> and sends it to the server.</p></li>
<li><p>Here, server is waiting in <span class="docutils literal">poll(2)</span> for an event, like incoming message.</p></li>
<li><p>As soon as the first bytes of message are received, even loop wakes up and
server starts reading the whole message.</p></li>
<li><p>Once fully read, the event loop notifies threads known as worker threads from
which one picks the incoming message, decodes and process it.</p></li>
<li><p>As soon as API execution is finished, a reply is sent to the client.</p></li>
</ol>
<p>In case that there's no free worker to process an incoming message in step 5,
message is placed at the end of a message queue and is processed in next
iteration.</p>
</div>
</div>
</body>
</html>
