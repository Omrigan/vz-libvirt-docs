<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta charset="utf-8"/>
<meta name="generator" content="Docutils 0.16: http://docutils.sourceforge.net/" />
<title>Launch security with AMD SEV</title>

</head>
<body>
<div class="document" id="launch-security-with-amd-sev">
<h1 class="title">Launch security with AMD SEV</h1>

<div class="contents topic" id="contents">
<p class="topic-title">Contents</p>
<ul class="simple">
<li><p><a class="reference internal" href="#amd-secure-encrypted-virtualization-sev" id="id1">AMD Secure Encrypted Virtualization (SEV)</a></p></li>
<li><p><a class="reference internal" href="#enabling-sev-on-the-host" id="id2">Enabling SEV on the host</a></p></li>
<li><p><a class="reference internal" href="#checking-sev-support-in-the-virt-stack" id="id3">Checking SEV support in the virt stack</a></p></li>
<li><p><a class="reference internal" href="#vm-configuration" id="id4">VM Configuration</a></p>
<ul>
<li><p><a class="reference internal" href="#machine-type" id="id5">Machine type</a></p>
<ul>
<li><p><a class="reference internal" href="#q35" id="id6">Q35</a></p></li>
<li><p><a class="reference internal" href="#i440fx-discouraged" id="id7">i440fx (discouraged)</a></p></li>
</ul>
</li>
<li><p><a class="reference internal" href="#boot-loader" id="id8">Boot loader</a></p></li>
<li><p><a class="reference internal" href="#memory" id="id9">Memory</a></p></li>
<li><p><a class="reference internal" href="#virtio" id="id10">Virtio</a></p>
<ul>
<li><p><a class="reference internal" href="#virtio-net" id="id11">Virtio-net</a></p></li>
</ul>
</li>
</ul>
</li>
<li><p><a class="reference internal" href="#checking-sev-from-within-the-guest" id="id12">Checking SEV from within the guest</a></p></li>
<li><p><a class="reference internal" href="#limitations" id="id13">Limitations</a></p></li>
<li><p><a class="reference internal" href="#full-domain-xml-examples" id="id14">Full domain XML examples</a></p>
<ul>
<li><p><a class="reference internal" href="#q35-machine" id="id15">Q35 machine</a></p></li>
<li><p><a class="reference internal" href="#pc-i440fx-machine" id="id16">PC-i440fx machine</a></p></li>
</ul>
</li>
</ul>
</div>
<p>Storage encryption in modern public cloud computing is a common
practice. However, from the point of view of a user of these cloud
workloads, a significant amount of trust needs to be put in the cloud
platform security as well as integrity (was the hypervisor tampered?).
For this reason there's ever rising demand for securing data in use,
i.e. memory encryption. One of the solutions addressing this matter is
AMD SEV.</p>
<div class="section" id="amd-secure-encrypted-virtualization-sev">
<h1><a class="toc-backref" href="#id1">AMD Secure Encrypted Virtualization (SEV)</a></h1>
<p>SEV (Secure Encrypted Virtualization) is a feature extension of AMD's
SME (Secure Memory Encryption) intended for KVM virtual machines which
is supported primarily on AMD's EPYC CPU line. In contrast to SME, SEV
uses a unique memory encryption key for each VM. The whole encryption of
memory pages is completely transparent to the hypervisor and happens
inside dedicated hardware in the on-die memory controller. Each
controller includes a high-performance Advanced Encryption Standard
(AES) engine that encrypts data when it is written to DRAM and decrypts
it when read. For more details about the technology itself, you can
visit <a class="reference external" href="https://developer.amd.com/sev/">AMD's developer portal</a>.</p>
</div>
<div class="section" id="enabling-sev-on-the-host">
<h1><a class="toc-backref" href="#id2">Enabling SEV on the host</a></h1>
<p>Before VMs can make use of the SEV feature you need to make sure your
AMD CPU does support SEV. You can run <span class="docutils literal"><span class="pre">virt-host-validate</span></span>
(libvirt &gt;= 6.5.0) to check if your host supports secure guests or you
can follow the manual checks below.</p>
<p>You can manually check whether SEV is among the CPU flags with:</p>
<pre class="literal-block">$ grep -w sev /proc/cpuinfo
...
sme ssbd sev ibpb</pre>
<p>Next step is to enable SEV in the kernel, because it is disabled by
default. This is done by putting the following onto the kernel command
line:</p>
<pre class="literal-block">mem_encrypt=on kvm_amd.sev=1</pre>
<p>To make the changes persistent, append the above to the variable holding
parameters of the kernel command line in <span class="docutils literal">/etc/default/grub</span> to
preserve SEV settings across reboots</p>
<pre class="literal-block">$ cat /etc/default/grub
...
GRUB_CMDLINE_LINUX=&quot;... mem_encrypt=on kvm_amd.sev=1&quot;
$ grub2-mkconfig -o /boot/efi/EFI/&lt;distro&gt;/grub.cfg</pre>
<p><span class="docutils literal">mem_encrypt=on</span> turns on the SME memory encryption feature on the
host which protects against the physical attack on the hypervisor
memory. The <span class="docutils literal">kvm_amd.sev</span> parameter actually enables SEV in the kvm
module. It can be set on the command line alongside <span class="docutils literal">mem_encrypt</span> like
shown above, or it can be put into a module config under
<span class="docutils literal">/etc/modprobe.d/</span></p>
<pre class="literal-block">$ cat /etc/modprobe.d/sev.conf
options kvm_amd sev=1</pre>
<p>After rebooting the host, you should see SEV being enabled in the
kernel:</p>
<pre class="literal-block">$ cat /sys/module/kvm_amd/parameters/sev
1</pre>
</div>
<div class="section" id="checking-sev-support-in-the-virt-stack">
<h1><a class="toc-backref" href="#id3">Checking SEV support in the virt stack</a></h1>
<p><strong>Note: All of the commands below need to be run with root
privileges.</strong></p>
<p>First make sure you have the following packages in the specified
versions:</p>
<ul class="simple">
<li><p>libvirt &gt;= 4.5.0 (&gt;5.1.0 recommended due to additional SEV bugfixes)</p></li>
<li><p>QEMU &gt;= 2.12.0</p></li>
</ul>
<p>To confirm that the virtualization stack supports SEV, run the
following:</p>
<pre class="literal-block"># virsh domcapabilities
&lt;domainCapabilities&gt;
...
  &lt;features&gt;
    ...
    &lt;sev supported='yes'&gt;
      &lt;cbitpos&gt;47&lt;/cbitpos&gt;
      &lt;reducedPhysBits&gt;1&lt;/reducedPhysBits&gt;
    &lt;/sev&gt;
    ...
  &lt;/features&gt;
&lt;/domainCapabilities&gt;</pre>
<p>Note that if libvirt (&lt;6.5.0) was already installed and libvirtd running before
enabling SEV in the kernel followed by the host reboot you need to force
libvirtd to re-probe both the host and QEMU capabilities. First stop
libvirtd:</p>
<pre class="literal-block"># systemctl stop libvirtd.service</pre>
<p>Now you need to clean the capabilities cache:</p>
<pre class="literal-block"># rm -f /var/cache/libvirt/qemu/capabilities/*</pre>
<p>If you now restart libvirtd, it will re-probe the capabilities and if
you now run:</p>
<pre class="literal-block"># virsh domcapabilities</pre>
<p>SEV should be listed as supported. If you still see:</p>
<pre class="literal-block">&lt;sev supported='no'/&gt;</pre>
<p>it means one of two things:</p>
<ol class="arabic simple">
<li><p>libvirt does support SEV, but either QEMU or the host does not</p></li>
<li><p>you have libvirt &lt;=5.1.0 which suffered from getting a
<span class="docutils literal">'Permission denied'</span> on <span class="docutils literal">/dev/sev</span> because of the default
permissions on the character device which prevented QEMU from opening
it during capabilities probing - you can either manually tweak the
permissions so that QEMU has access to it or preferably install
libvirt 5.1.0 or higher</p></li>
</ol>
</div>
<div class="section" id="vm-configuration">
<h1><a class="toc-backref" href="#id4">VM Configuration</a></h1>
<p>SEV is enabled in the XML by specifying the
<a class="reference external" href="https://libvirt.org/formatdomain.html#launch-security">&lt;launchSecurity&gt;</a>
element. However, specifying <span class="docutils literal">launchSecurity</span> isn't enough to boot an
SEV VM. Further configuration requirements are discussed below.</p>
<div class="section" id="machine-type">
<h2><a class="toc-backref" href="#id5">Machine type</a></h2>
<p>Even though both Q35 and legacy PC machine types (for PC see also
&quot;virtio&quot;) can be used with SEV, usage of the legacy PC machine type is
strongly discouraged, since depending on how your OVMF package was built
(e.g. including features like SecureBoot or SMM) Q35 may even be
required.</p>
<div class="section" id="q35">
<h3><a class="toc-backref" href="#id6">Q35</a></h3>
<pre class="literal-block">...
&lt;os&gt;
  &lt;type arch='x86_64' machine='pc-q35-3.0'&gt;hvm&lt;/type&gt;
  ...
&lt;/os&gt;
...</pre>
</div>
<div class="section" id="i440fx-discouraged">
<h3><a class="toc-backref" href="#id7">i440fx (discouraged)</a></h3>
<pre class="literal-block">...
&lt;os&gt;
  &lt;type arch='x86_64' machine='pc-i440fx-3.0'&gt;hvm&lt;/type&gt;
  ...
&lt;/os&gt;
...</pre>
</div>
</div>
<div class="section" id="boot-loader">
<h2><a class="toc-backref" href="#id8">Boot loader</a></h2>
<p>SEV is only going to work with OVMF (UEFI), so you'll need to point
libvirt to the correct OVMF binary.</p>
<pre class="literal-block">...
&lt;os&gt;
  &lt;type arch='x86_64' machine='pc-q35-3.0'&gt;hvm&lt;/type&gt;
  &lt;loader readonly='yes' type='pflash'&gt;/usr/share/edk2/ovmf/OVMF_CODE.fd&lt;/loader&gt;
&lt;/os&gt;
...</pre>
</div>
<div class="section" id="memory">
<h2><a class="toc-backref" href="#id9">Memory</a></h2>
<p>Internally, SEV expects that the encrypted memory pages won't be swapped
out or move around so the VM memory needs to be pinned in physical RAM
which will be handled by QEMU. Apart from that, certain memory regions
allocated by QEMU itself (UEFI pflash, device ROMs, video RAM, etc.)
have to be encrypted as well. This causes a conflict in how libvirt
tries to protect the host. By default, libvirt enforces a memory hard
limit on each VM's cgroup in order to protect the host from malicious
QEMU to allocate and lock all the available memory. This limit
corresponds to the total memory allocation for the VM given by
<span class="docutils literal">&lt;currentMemory&gt;</span> element. However, trying to account for the
additional memory regions QEMU allocates when calculating the limit in
an automated manner is non-deterministic. One way to resolve this is to
set the hard limit manually.</p>
<p>Note: Figuring out the right number so that your guest boots and isn't
killed is challenging, but 256MiB extra memory over the total guest RAM
should suffice for most workloads and may serve as a good starting
point. For example, a domain with 4GB memory with a 256MiB extra hard
limit would look like this:</p>
<pre class="literal-block"># virsh edit &lt;domain&gt;
&lt;domain&gt;
  ...
  &lt;currentMemory unit='KiB'&gt;4194304&lt;/currentMemory&gt;
  &lt;memtune&gt;
    &lt;hard_limit unit='KiB'&gt;4456448&lt;/hard_limit&gt;
  &lt;/memtune&gt;
  ...
&lt;/domain&gt;</pre>
<p>There's another, preferred method of taking care of the limits by using
the<span class="docutils literal">&lt;memoryBacking&gt;</span> element along with the <span class="docutils literal">&lt;locked/&gt;</span>
subelement:</p>
<pre class="literal-block">&lt;domain&gt;
  ...
  &lt;memoryBacking&gt;
    &lt;locked/&gt;
  &lt;/memoryBacking&gt;
  ...
&lt;/domain&gt;</pre>
<p>What that does is that it tells libvirt not to force any hard limit
(well, unlimited) upon the VM cgroup. The obvious advantage is that one
doesn't need to determine the hard limit for every single SEV-enabled
VM. However, there is a significant security-related drawback to this
approach. Since no hard limit is applied, a malicious QEMU could perform
a DoS attack by locking all of the host's available memory. The way to
avoid this issue and to protect the host is to enforce a bigger hard
limit on the master cgroup containing all of the VMs - on systemd this
is <span class="docutils literal">machine.slice</span>.</p>
<pre class="literal-block"># systemctl set-property machine.slice MemoryHigh=&lt;value&gt;</pre>
<p>To put even stricter measures in place which would involve the OOM
killer, use</p>
<pre class="literal-block"># systemctl set-property machine.slice MemoryMax=&lt;value&gt;</pre>
<p>instead. Alternatively, you can create a systemd config (don't forget to
reload systemd configuration in this case):</p>
<pre class="literal-block"># cat &lt;&lt; EOF &gt; /etc/systemd/system.control/machine.slice.d/90-MemoryMax.conf
MemoryMax=&lt;value&gt;
EOF</pre>
<p>The trade-off to keep in mind with the second approach is that the VMs
can still perform DoS on each other.</p>
</div>
<div class="section" id="virtio">
<h2><a class="toc-backref" href="#id10">Virtio</a></h2>
<p>In order to make virtio devices work, we need to use
<span class="docutils literal">&lt;driver <span class="pre">iommu='on'/&gt;</span></span> inside the given device XML element in order
to enable DMA API in the virtio driver.</p>
<p>Starting with QEMU 6.0.0 QEMU will set this for us by default. For earlier
versions though, you will need to explicitly enable this in the device XML as
follows:</p>
<pre class="literal-block"># virsh edit &lt;domain&gt;
&lt;domain&gt;
  ...
  &lt;controller type='virtio-serial' index='0'&gt;
    &lt;driver iommu='on'/&gt;
  &lt;/controller&gt;
  &lt;controller type='scsi' index='0' model='virtio-scsi'&gt;
    &lt;driver iommu='on'/&gt;
  &lt;/controller&gt;
  ...
  &lt;memballoon model='virtio'&gt;
    &lt;driver iommu='on'/&gt;
  &lt;/memballoon&gt;
  &lt;rng model='virtio'&gt;
    &lt;backend model='random'&gt;/dev/urandom&lt;/backend&gt;
    &lt;driver iommu='on'/&gt;
  &lt;/rng&gt;
  ...
&lt;domain&gt;</pre>
<p>If you for some reason want to use the legacy PC machine type, further
changes to the virtio configuration is required, because SEV will not
work with Virtio &lt;1.0. In libvirt, this is handled by using the
virtio-non-transitional device model (libvirt &gt;= 5.2.0 required).</p>
<p>Note: some devices like video devices don't support non-transitional
model, which means that virtio GPU cannot be used.</p>
<pre class="literal-block">&lt;domain&gt;
  ...
  &lt;devices&gt;
    ...
    &lt;memballoon model='virtio-non-transitional'&gt;
      &lt;driver iommu='on'/&gt;
    &lt;/memballoon&gt;
  &lt;/devices&gt;
  ...
&lt;/domain&gt;</pre>
<div class="section" id="virtio-net">
<h3><a class="toc-backref" href="#id11">Virtio-net</a></h3>
<p>With virtio-net it's also necessary to disable the iPXE option ROM as
iPXE is not aware of SEV (at the time of this writing). This translates to the
following XML:</p>
<pre class="literal-block">&lt;domain&gt;
  ...
  &lt;interface type='network'&gt;
     ...
    &lt;model type='virtio'/&gt;
    &lt;driver iommu='on'/&gt;
    &lt;rom enabled='no'/&gt;
  &lt;/interface&gt;
  ...
&lt;domain&gt;</pre>
</div>
</div>
</div>
<div class="section" id="checking-sev-from-within-the-guest">
<h1><a class="toc-backref" href="#id12">Checking SEV from within the guest</a></h1>
<p>After making the necessary adjustments discussed in
<a class="reference internal" href="#vm-configuration">VM Configuration</a>, the VM should now boot successfully
with SEV enabled. You can then verify that the guest has SEV enabled by
running:</p>
<pre class="literal-block"># dmesg | grep -i sev
AMD Secure Encrypted Virtualization (SEV) active</pre>
</div>
<div class="section" id="limitations">
<h1><a class="toc-backref" href="#id13">Limitations</a></h1>
<p>With older kernels (kernel &lt;5.1) the boot disk cannot not be of type
virtio-blk, instead, virtio-scsi needs to be used if virtio is desired.</p>
<p>If you still cannot start an SEV VM, it could be because of wrong SELinux label
on the <span class="docutils literal">/dev/sev</span> device with selinux-policy &lt;3.14.2.40 which prevents QEMU
from touching the device. This can be resolved by upgrading the package, tuning
the selinux policy rules manually to allow svirt_t to access the device (see
<span class="docutils literal">audit2allow</span> on how to do that) or putting SELinux into permissive mode
(discouraged).</p>
</div>
<div class="section" id="full-domain-xml-examples">
<h1><a class="toc-backref" href="#id14">Full domain XML examples</a></h1>
<div class="section" id="q35-machine">
<h2><a class="toc-backref" href="#id15">Q35 machine</a></h2>
<pre class="literal-block">&lt;domain type='kvm'&gt;
  &lt;name&gt;sev-dummy&lt;/name&gt;
  &lt;memory unit='KiB'&gt;4194304&lt;/memory&gt;
  &lt;currentMemory unit='KiB'&gt;4194304&lt;/currentMemory&gt;
  &lt;memoryBacking&gt;
    &lt;locked/&gt;
  &lt;/memoryBacking&gt;
  &lt;vcpu placement='static'&gt;4&lt;/vcpu&gt;
  &lt;os&gt;
    &lt;type arch='x86_64' machine='pc-q35-3.0'&gt;hvm&lt;/type&gt;
    &lt;loader readonly='yes' type='pflash'&gt;/usr/share/edk2/ovmf/OVMF_CODE.fd&lt;/loader&gt;
    &lt;nvram&gt;/var/lib/libvirt/qemu/nvram/sev-dummy_VARS.fd&lt;/nvram&gt;
  &lt;/os&gt;
  &lt;features&gt;
    &lt;acpi/&gt;
    &lt;apic/&gt;
    &lt;vmport state='off'/&gt;
  &lt;/features&gt;
  &lt;cpu mode='host-model' check='partial'&gt;
    &lt;model fallback='allow'/&gt;
  &lt;/cpu&gt;
  &lt;clock offset='utc'&gt;
    &lt;timer name='rtc' tickpolicy='catchup'/&gt;
    &lt;timer name='pit' tickpolicy='delay'/&gt;
    &lt;timer name='hpet' present='no'/&gt;
  &lt;/clock&gt;
  &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;
  &lt;on_reboot&gt;restart&lt;/on_reboot&gt;
  &lt;on_crash&gt;destroy&lt;/on_crash&gt;
  &lt;pm&gt;
    &lt;suspend-to-mem enabled='no'/&gt;
    &lt;suspend-to-disk enabled='no'/&gt;
  &lt;/pm&gt;
  &lt;devices&gt;
    &lt;emulator&gt;/usr/bin/qemu-kvm&lt;/emulator&gt;
    &lt;disk type='file' device='disk'&gt;
      &lt;driver name='qemu' type='qcow2'/&gt;
      &lt;source file='/var/lib/libvirt/images/sev-dummy.qcow2'/&gt;
      &lt;target dev='sda' bus='scsi'/&gt;
      &lt;boot order='1'/&gt;
    &lt;/disk&gt;
    &lt;controller type='virtio-serial' index='0'&gt;
      &lt;driver iommu='on'/&gt;
    &lt;/controller&gt;
    &lt;controller type='scsi' index='0' model='virtio-scsi'&gt;
      &lt;driver iommu='on'/&gt;
    &lt;/controller&gt;
    &lt;interface type='network'&gt;
      &lt;mac address='52:54:00:cc:56:90'/&gt;
      &lt;source network='default'/&gt;
      &lt;model type='virtio'/&gt;
      &lt;driver iommu='on'/&gt;
      &lt;rom enabled='no'/&gt;
    &lt;/interface&gt;
    &lt;graphics type='spice' autoport='yes'&gt;
      &lt;listen type='address'/&gt;
      &lt;gl enable='no'/&gt;
    &lt;/graphics&gt;
    &lt;video&gt;
      &lt;model type='qxl'/&gt;
    &lt;/video&gt;
    &lt;memballoon model='virtio'&gt;
      &lt;driver iommu='on'/&gt;
    &lt;/memballoon&gt;
    &lt;rng model='virtio'&gt;
      &lt;driver iommu='on'/&gt;
    &lt;/rng&gt;
  &lt;/devices&gt;
  &lt;launchSecurity type='sev'&gt;
    &lt;cbitpos&gt;47&lt;/cbitpos&gt;
    &lt;reducedPhysBits&gt;1&lt;/reducedPhysBits&gt;
    &lt;policy&gt;0x0003&lt;/policy&gt;
  &lt;/launchSecurity&gt;
&lt;/domain&gt;</pre>
</div>
<div class="section" id="pc-i440fx-machine">
<h2><a class="toc-backref" href="#id16">PC-i440fx machine</a></h2>
<pre class="literal-block">&lt;domain type='kvm'&gt;
  &lt;name&gt;sev-dummy-legacy&lt;/name&gt;
  &lt;memory unit='KiB'&gt;4194304&lt;/memory&gt;
  &lt;currentMemory unit='KiB'&gt;4194304&lt;/currentMemory&gt;
  &lt;memtune&gt;
    &lt;hard_limit unit='KiB'&gt;5242880&lt;/hard_limit&gt;
  &lt;/memtune&gt;
  &lt;vcpu placement='static'&gt;4&lt;/vcpu&gt;
  &lt;os&gt;
    &lt;type arch='x86_64' machine='pc-i440fx-3.0'&gt;hvm&lt;/type&gt;
    &lt;loader readonly='yes' type='pflash'&gt;/usr/share/edk2/ovmf/OVMF_CODE.fd&lt;/loader&gt;
    &lt;nvram&gt;/var/lib/libvirt/qemu/nvram/sev-dummy_VARS.fd&lt;/nvram&gt;
    &lt;boot dev='hd'/&gt;
  &lt;/os&gt;
  &lt;features&gt;
  &lt;acpi/&gt;
  &lt;apic/&gt;
  &lt;vmport state='off'/&gt;
  &lt;/features&gt;
  &lt;cpu mode='host-model' check='partial'&gt;
    &lt;model fallback='allow'/&gt;
  &lt;/cpu&gt;
  &lt;clock offset='utc'&gt;
    &lt;timer name='rtc' tickpolicy='catchup'/&gt;
    &lt;timer name='pit' tickpolicy='delay'/&gt;
    &lt;timer name='hpet' present='no'/&gt;
  &lt;/clock&gt;
  &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;
  &lt;on_reboot&gt;restart&lt;/on_reboot&gt;
  &lt;on_crash&gt;destroy&lt;/on_crash&gt;
  &lt;pm&gt;
    &lt;suspend-to-mem enabled='no'/&gt;
    &lt;suspend-to-disk enabled='no'/&gt;
  &lt;/pm&gt;
  &lt;devices&gt;
    &lt;emulator&gt;/usr/bin/qemu-kvm&lt;/emulator&gt;
    &lt;disk type='file' device='disk'&gt;
      &lt;driver name='qemu' type='qcow2'/&gt;
      &lt;source file='/var/lib/libvirt/images/sev-dummy-seabios.qcow2'/&gt;
      &lt;target dev='sda' bus='sata'/&gt;
    &lt;/disk&gt;
    &lt;interface type='network'&gt;
      &lt;mac address='52:54:00:d8:96:c8'/&gt;
      &lt;source network='default'/&gt;
      &lt;model type='virtio-non-transitional'/&gt;
      &lt;driver iommu='on'/&gt;
      &lt;rom enabled='no'/&gt;
    &lt;/interface&gt;
    &lt;serial type='pty'&gt;
      &lt;target type='isa-serial' port='0'&gt;
        &lt;model name='isa-serial'/&gt;
      &lt;/target&gt;
    &lt;/serial&gt;
    &lt;console type='pty'&gt;
      &lt;target type='serial' port='0'/&gt;
    &lt;/console&gt;
    &lt;input type='tablet' bus='usb'&gt;
      &lt;address type='usb' bus='0' port='1'/&gt;
    &lt;/input&gt;
    &lt;input type='mouse' bus='ps2'/&gt;
    &lt;input type='keyboard' bus='ps2'/&gt;
    &lt;graphics type='spice' autoport='yes'&gt;
      &lt;listen type='address'/&gt;
      &lt;gl enable='no'/&gt;
    &lt;/graphics&gt;
    &lt;video&gt;
      &lt;model type='qxl' ram='65536' vram='65536' vgamem='16384' heads='1' primary='yes'/&gt;
    &lt;/video&gt;
    &lt;memballoon model='virtio-non-transitional'&gt;
      &lt;driver iommu='on'/&gt;
    &lt;/memballoon&gt;
      &lt;rng model='virtio-non-transitional'&gt;
    &lt;driver iommu='on'/&gt;
    &lt;/rng&gt;
  &lt;/devices&gt;
  &lt;launchSecurity type='sev'&gt;
    &lt;cbitpos&gt;47&lt;/cbitpos&gt;
    &lt;reducedPhysBits&gt;1&lt;/reducedPhysBits&gt;
    &lt;policy&gt;0x0003&lt;/policy&gt;
  &lt;/launchSecurity&gt;
&lt;/domain&gt;</pre>
</div>
</div>
</div>
</body>
</html>
