<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta charset="utf-8"/>
<meta name="generator" content="Docutils 0.16: http://docutils.sourceforge.net/" />
<title>Protected Virtualization on s390</title>

</head>
<body>
<div class="document" id="protected-virtualization-on-s390">
<h1 class="title">Protected Virtualization on s390</h1>

<div class="contents topic" id="contents">
<p class="topic-title">Contents</p>
<ul class="simple">
<li><p><a class="reference internal" href="#overview" id="id1">Overview</a></p></li>
<li><p><a class="reference internal" href="#host-requirements" id="id2">Host Requirements</a></p></li>
<li><p><a class="reference internal" href="#guest-requirements" id="id3">Guest Requirements</a></p>
<ul>
<li><p><a class="reference internal" href="#guest-boot" id="id4">Guest Boot</a></p></li>
<li><p><a class="reference internal" href="#guest-i-o" id="id5">Guest I/O</a></p></li>
</ul>
</li>
<li><p><a class="reference internal" href="#example-guest-definition" id="id6">Example guest definition</a></p></li>
<li><p><a class="reference internal" href="#example-guest-definition-without-launchsecurity" id="id7">Example guest definition without launchSecurity</a></p></li>
</ul>
</div>
<div class="section" id="overview">
<h1><a class="toc-backref" href="#id1">Overview</a></h1>
<p>Protected virtualization, also known as IBM Secure Execution is a
hardware-based privacy protection technology for s390x (IBM Z).
It allows to execute virtual machines such that the host system
has no access to a VM's state and memory contents.</p>
<p>Unlike other similar technologies, the memory of a running guest
is not encrypted but protected by hardware access controls, which
may only be manipulated by trusted system firmware, called
ultravisor.</p>
<p>For the cases where the host needs access to guest memory (e.g. for
paging), it can request pages to be exported to it. The exported page
will be encrypted with a unique key for the running guest by the
ultravisor. The ultravisor also computes an integrity value for
the page, and stores it in a special table, together with the page
index and a counter. This way it can verify the integrity of
the page content upon re-import into the guest.</p>
<p>In other cases it may be necessary for a guest to grant the host access
to dedicated memory regions (e.g. for I/O). The guest can request
that the ultravisor removes the memory protection from individual
pages, so that they can be shared with the host. Likewise, the
guest can undo the sharing.</p>
<p>A secure guest will initially start in a regular non-protected VM.
The start-up is controlled by a small bootstrap program loaded
into memory together with encrypted operating system components and
a control structure (the PV header).
The operating system components (e.g. Linux kernel, initial RAM
file system, kernel parameters) are encrypted and integrity
protected. The component encryption keys and integrity values are
stored in the PV header.
The PV header is wrapped with a public key belonging to a specific
system (in fact it can be wrapped with multiple such keys). The
matching private key is only accessible by trusted hardware and
firmware in that specific system.
Consequently, such a secure guest boot image can only be run on the
systems it has been prepared for. Its contents can't be decrypted
without access to the private key and it can't be modified as
it is integrity protected.</p>
</div>
<div class="section" id="host-requirements">
<h1><a class="toc-backref" href="#id2">Host Requirements</a></h1>
<p>IBM Secure Execution for Linux has some hardware and firmware
requirements. The system hardware must be an IBM z15 (or newer),
or an IBM LinuxONE III (or newer).</p>
<p>It is also necessary that the IBM Secure Execution feature is
enabled for that system. With libvirt &gt;= 6.5.0 you can run
<span class="docutils literal"><span class="pre">virt-host-validate</span></span> or otherwise check for facility '158', e.g.</p>
<pre class="literal-block">$ grep facilities /proc/cpuinfo | grep 158</pre>
<p>The kernel must include the protected virtualization support
which can be verified by checking for the presence of directory
<span class="docutils literal">/sys/firmware/uv</span>. It will only be present when both the
hardware and the kernel support are available.</p>
<p>Finally, the host operating system must donate some memory to
the ultravisor needed to store memory security information.
This is achieved by specifying the following kernel command
line parameter to the host boot configuration</p>
<pre class="literal-block">prot_virt=1</pre>
</div>
<div class="section" id="guest-requirements">
<h1><a class="toc-backref" href="#id3">Guest Requirements</a></h1>
<div class="section" id="guest-boot">
<h2><a class="toc-backref" href="#id4">Guest Boot</a></h2>
<p>To start a guest in protected virtualization secure mode, the
boot image must have been prepared first with the program
<span class="docutils literal">genprotimg</span> using the correct public key for this host.
<span class="docutils literal">genprotimg</span> is part of the package <span class="docutils literal"><span class="pre">s390-tools</span></span>, or
<span class="docutils literal"><span class="pre">s390-utils</span></span>, depending on the Linux distribution being used.
It can also be found at
<a class="reference external" href="https://github.com/ibm-s390-tools/s390-tools/tree/master/genprotimg">https://github.com/ibm-s390-tools/s390-tools/tree/master/genprotimg</a></p>
<p>The guests have to be configured to use the host CPU model, which
must contain the <span class="docutils literal">unpack</span> facility indicating ultravisor guest support.</p>
<p>With the following command it's possible to check whether the host
CPU model satisfies the requirement</p>
<pre class="literal-block">$ virsh domcapabilities | grep unpack</pre>
<p>which should return</p>
<pre class="literal-block">&lt;feature policy='require' name='unpack'/&gt;</pre>
<p>Note that on hosts with libvirt &lt; 6.5.0 if the check fails despite
the host system actually supporting protected virtualization guests,
this can be caused by a stale libvirt capabilities cache.
To recover, run the following commands</p>
<pre class="literal-block">$ systemctl stop libvirtd
$ rm /var/cache/libvirt/qemu/capabilities/*.xml
$ systemctl start libvirtd</pre>
</div>
<div class="section" id="guest-i-o">
<h2><a class="toc-backref" href="#id5">Guest I/O</a></h2>
<p>Protected virtualization guests support I/O using virtio devices.
As the virtio data structures of secure guests are not accessible
by the host, it is necessary to use shared memory ('bounce buffers').</p>
<p>Since libvirt 7.6.0 the
<a class="reference external" href="https://libvirt.org/formatdomain.html#launch-security">&lt;launchSecurity&gt;</a>
element with type <span class="docutils literal"><span class="pre">s390-pv</span></span> should be used on protected virtualization guests.
Without <span class="docutils literal">launchSecurity</span> you must enable all virtio devices to use shared
buffers by configuring them with platform_iommu enabled.
This can done by adding <span class="docutils literal"><span class="pre">iommu='on'</span></span> to the driver element of a virtio
device definition in the guest's XML, e.g.</p>
<pre class="literal-block">&lt;interface type='network'&gt;
  &lt;source network='default'/&gt;
  &lt;model type='virtio'/&gt;
  &lt;driver name='vhost' iommu='on'/&gt;
&lt;/interface&gt;</pre>
<p>Unless you are using <span class="docutils literal">launchSecurity</span> you must define all virtio bus
devices in this way to prevent the host from attempting to access
protected memory.</p>
<p>Ballooning will not work and is fenced by QEMU. It should be
disabled by specifying</p>
<pre class="literal-block">&lt;memballoon model='none'/&gt;</pre>
<p>Finally, the guest Linux must be instructed to allocate I/O
buffers using memory shared between host and guest using SWIOTLB.
This is done by adding <span class="docutils literal">swiotlb=nnn</span> to the guest's kernel command
line string, where <span class="docutils literal">nnn</span> stands for the number of statically
allocated 2K entries. A commonly used value for swiotlb is 262144.</p>
</div>
</div>
<div class="section" id="example-guest-definition">
<h1><a class="toc-backref" href="#id6">Example guest definition</a></h1>
<p>Minimal domain XML for a protected virtualization guest with
the <span class="docutils literal">launchSecurity</span> element of type <span class="docutils literal"><span class="pre">s390-pv</span></span></p>
<pre class="literal-block">&lt;domain type='kvm'&gt;
  &lt;name&gt;protected&lt;/name&gt;
  &lt;memory unit='KiB'&gt;2048000&lt;/memory&gt;
  &lt;currentMemory unit='KiB'&gt;2048000&lt;/currentMemory&gt;
  &lt;vcpu&gt;1&lt;/vcpu&gt;
  &lt;os&gt;
    &lt;type arch='s390x'&gt;hvm&lt;/type&gt;
  &lt;/os&gt;
  &lt;cpu mode='host-model'/&gt;
  &lt;devices&gt;
    &lt;disk type='file' device='disk'&gt;
      &lt;driver name='qemu' type='qcow2' cache='none' io='native'&gt;
      &lt;source file='/var/lib/libvirt/images/protected.qcow2'/&gt;
      &lt;target dev='vda' bus='virtio'/&gt;
    &lt;/disk&gt;
    &lt;interface type='network'&gt;
      &lt;source network='default'/&gt;
      &lt;model type='virtio'/&gt;
    &lt;/interface&gt;
    &lt;console type='pty'/&gt;
    &lt;memballoon model='none'/&gt;
  &lt;/devices&gt;
  &lt;launchSecurity type='s390-pv'/&gt;
&lt;/domain&gt;</pre>
</div>
<div class="section" id="example-guest-definition-without-launchsecurity">
<h1><a class="toc-backref" href="#id7">Example guest definition without launchSecurity</a></h1>
<p>Minimal domain XML for a protected virtualization guest using the
<span class="docutils literal"><span class="pre">iommu='on'</span></span> setting for each virtio device.</p>
<pre class="literal-block">&lt;domain type='kvm'&gt;
  &lt;name&gt;protected&lt;/name&gt;
  &lt;memory unit='KiB'&gt;2048000&lt;/memory&gt;
  &lt;currentMemory unit='KiB'&gt;2048000&lt;/currentMemory&gt;
  &lt;vcpu&gt;1&lt;/vcpu&gt;
  &lt;os&gt;
    &lt;type arch='s390x'&gt;hvm&lt;/type&gt;
  &lt;/os&gt;
  &lt;cpu mode='host-model'/&gt;
  &lt;devices&gt;
    &lt;disk type='file' device='disk'&gt;
      &lt;driver name='qemu' type='qcow2' cache='none' io='native' iommu='on'&gt;
      &lt;source file='/var/lib/libvirt/images/protected.qcow2'/&gt;
      &lt;target dev='vda' bus='virtio'/&gt;
    &lt;/disk&gt;
    &lt;interface type='network'&gt;
      &lt;driver iommu='on'/&gt;
      &lt;source network='default'/&gt;
      &lt;model type='virtio'/&gt;
    &lt;/interface&gt;
    &lt;console type='pty'/&gt;
    &lt;memballoon model='none'/&gt;
  &lt;/devices&gt;
&lt;/domain&gt;</pre>
</div>
</div>
</body>
</html>
