<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta charset="utf-8"/>
<meta name="generator" content="Docutils 0.16: http://docutils.sourceforge.net/" />
<title>Disk image chains</title>

</head>
<body>
<div class="document" id="disk-image-chains">
<h1 class="title">Disk image chains</h1>

<p>Modern disk image formats allow users to create an overlay on top of an
existing image which will be the target of the new guest writes. This allows us
to do snapshots of the disk state of a VM efficiently. The following text
describes how libvirt manages such image chains and some problems which can
occur. Note that many of the cases mentioned below are currently only relevant
for the qemu driver.</p>
<div class="contents topic" id="contents">
<p class="topic-title">Contents</p>
<ul class="simple">
<li><p><a class="reference internal" href="#domain-xml-image-and-chain-specification" id="id1">Domain XML image and chain specification</a></p>
<ul>
<li><p><a class="reference internal" href="#basic-disk-setup" id="id2">Basic disk setup</a></p></li>
<li><p><a class="reference internal" href="#importance-of-proper-backing-chain-setup" id="id3">Importance of proper backing chain setup</a></p></li>
<li><p><a class="reference internal" href="#image-detection-caveats" id="id4">Image detection caveats</a></p></li>
<li><p><a class="reference internal" href="#advanced-backing-chain-specifications" id="id5">Advanced backing chain specifications</a></p></li>
</ul>
</li>
<li><p><a class="reference internal" href="#manual-image-creation" id="id6">Manual image creation</a></p></li>
<li><p><a class="reference internal" href="#troubleshooting" id="id7">Troubleshooting</a></p>
<ul>
<li><p><a class="reference internal" href="#vm-refuses-to-start-due-to-misconfigured-backing-store-format" id="id8">VM refuses to start due to misconfigured backing store format</a></p></li>
<li><p><a class="reference internal" href="#missing-images-reported-after-moving-disk-images-into-a-different-path" id="id9">Missing images reported after moving disk images into a different path</a></p></li>
</ul>
</li>
</ul>
</div>
<div class="section" id="domain-xml-image-and-chain-specification">
<h1><a class="toc-backref" href="#id1">Domain XML image and chain specification</a></h1>
<p>Disk image chains can be partially or fully configured in the domain XML. The
basic approach is to use the <span class="docutils literal">&lt;backingStore&gt;</span> elements in the configuration.</p>
<p>The <span class="docutils literal">&lt;backingStore&gt;</span> elements present in the live VM xml represent the actual
topology that libvirt knows of.</p>
<div class="section" id="basic-disk-setup">
<h2><a class="toc-backref" href="#id2">Basic disk setup</a></h2>
<p>Any default configuration or example usually refers only to the top (active)
image of the backing chain.</p>
<pre class="literal-block">&lt;disk type='file' device='disk'&gt;
  &lt;driver name='qemu' type='qcow2'/&gt;
  &lt;source file='/tmp/pull4.qcow2'/&gt;
  &lt;target dev='vda' bus='virtio'/&gt;
  &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x0a' function='0x0'/&gt;
&lt;/disk&gt;</pre>
<p>This configuration will prompt libvirt to detect the backing image of the source
image and recursively do the same thing until the end of the chain.</p>
</div>
<div class="section" id="importance-of-proper-backing-chain-setup">
<h2><a class="toc-backref" href="#id3">Importance of proper backing chain setup</a></h2>
<p>The disk image locations are used by libvirt to properly set up the security
system used on the host so that the hypervisor can access the files; it can
also be used to configure the hypervisor to use the appropriate images. Thus
it's important to properly set up the formats and paths of the backing images.</p>
<p>Any externally created image should always use the -F switch of <span class="docutils literal"><span class="pre">qemu-img</span></span>
to specify the format of the backing file to avoid probing.</p>
</div>
<div class="section" id="image-detection-caveats">
<h2><a class="toc-backref" href="#id4">Image detection caveats</a></h2>
<p>Detection of the backing chain requires libvirt to read and understand the
<span class="docutils literal">backing file</span> field recorded in the image metadata and also being able to
recurse and read the backing file. Due to security implications libvirt
will refuse to use backing images of any image whose format was not specified
explicitly in the XML or the overlay image itself.</p>
<p>Libvirt also might lack support for a network disk storage technology and thus
may be unable to visit and detect backing chains on such storage. This may
result in the backing chain in the live XML looking incomplete or some
operations not being possible. To prevent this it's possible to specify the
image metadata explicitly in the XML.</p>
</div>
<div class="section" id="advanced-backing-chain-specifications">
<h2><a class="toc-backref" href="#id5">Advanced backing chain specifications</a></h2>
<p>To specify the topology of disk images explicitly the following XML
specification can be used:</p>
<pre class="literal-block">&lt;disk type='file' device='disk'&gt;
  &lt;driver name='qemu' type='qcow2'/&gt;
  &lt;source file='/tmp/pull4.qcow2'/&gt;
  &lt;backingStore type='file'&gt;
    &lt;format type='qcow2'/&gt;
    &lt;source file='/tmp/pull3.qcow2'/&gt;
    &lt;backingStore type='file'&gt;
      &lt;format type='qcow2'/&gt;
      &lt;source file='/tmp/pull2.qcow2'/&gt;
      &lt;backingStore type='file'&gt;
        &lt;format type='qcow2'/&gt;
        &lt;source file='/tmp/pull1.qcow2'/&gt;
        &lt;backingStore type='file'&gt;
          &lt;format type='qcow2'/&gt;
          &lt;source file='/tmp/pull0.qcow2'/&gt;
          &lt;backingStore/&gt;
        &lt;/backingStore&gt;
      &lt;/backingStore&gt;
    &lt;/backingStore&gt;
  &lt;/backingStore&gt;
  &lt;target dev='vda' bus='virtio'/&gt;
  &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x0a' function='0x0'/&gt;
&lt;/disk&gt;</pre>
<p>This makes libvirt follow the settings as configured in the XML. Note that this
is supported only when the <a class="reference external" href="https://libvirt.org/formatdomaincaps.html#backingstoreinput">https://libvirt.org/formatdomaincaps.html#backingstoreinput</a>
capability is present.</p>
<p>An empty <span class="docutils literal">&lt;backingStore/&gt;</span> element signals the end of the chain. Using this
will prevent libvirt or qemu from probing the backing chain.</p>
<p>Note that it's also possible to partially specify the chain in the XML but omit
the terminating element. This will result in probing from the last specified
<span class="docutils literal">&lt;backingStore&gt;</span></p>
<p>Any image specified explicitly will not be probed for backing file or format.</p>
</div>
</div>
<div class="section" id="manual-image-creation">
<h1><a class="toc-backref" href="#id6">Manual image creation</a></h1>
<p>When creating disk images manually outside of libvirt it's important to create
them properly so that they work with libvirt as expected. The created disk
images must contain the format of the backing image in the metadata. This
means that the <strong>-F</strong> parameter of <span class="docutils literal"><span class="pre">qemu-img</span></span> must always be used.</p>
<pre class="literal-block">qemu-img create -f qcow2 -F qcow2 -b $BACKING_IMAGE_PATH $IMAGE_PATH</pre>
<p>Note that if <span class="docutils literal">$BACKING_IMAGE_PATH</span> is relative the path is considered relative to
the location of <span class="docutils literal">$IMAGE_PATH</span>.</p>
</div>
<div class="section" id="troubleshooting">
<h1><a class="toc-backref" href="#id7">Troubleshooting</a></h1>
<p>A few common problems which occur when managing chains of disk images.</p>
<div class="section" id="vm-refuses-to-start-due-to-misconfigured-backing-store-format">
<h2><a class="toc-backref" href="#id8">VM refuses to start due to misconfigured backing store format</a></h2>
<p>This problem happens on VMs where the backing chain was created manually outside
of libvirt and can have multiple symptoms:</p>
<ul class="simple">
<li><p>permission denied error reported on a backing image</p></li>
<li><p><span class="docutils literal">format of backing image '%s' of image '%s' was not specified in the image metadata</span> error reported</p></li>
<li><p>disk image looking corrupt inside the guest</p></li>
</ul>
<p>The cause of the above problem is that the image metadata does not record the
format of the backing image along with the location of the image. When the
format is not specified libvirt or qemu would have to do image format probing
which is insecure to do as a malicious guest could rewrite the header of the
disk leading to access of host files. Libvirt thus does not try to assume
the format of the backing image. The following command can be used to check if
the image has a backing image format specified:</p>
<pre class="literal-block">$ qemu-img info /tmp/copy4.qcow2
image: /tmp/copy4.qcow2
file format: qcow2
virtual size: 10 MiB (10485760 bytes)
disk size: 196 KiB
cluster_size: 65536
backing file: copy3.qcow2 (actual path: /tmp/copy3.qcow2)
backing file format: qcow2
Format specific information:
    compat: 1.1
    lazy refcounts: false
    refcount bits: 16
    corrupt: false</pre>
<p>If the <span class="docutils literal">backing file format</span> field is missing above the format was not
specified properly. The image can be fixed by the following command:</p>
<pre class="literal-block">qemu-img rebase -f $IMAGE_FORMAT -F $BACKING_IMAGE_FORMAT -b $BACKING_IMAGE_PATH $IMAGE_PATH</pre>
<p>It is important to fill out <span class="docutils literal">$BACKING_IMAGE_FORMAT</span> and <span class="docutils literal">$IMAGE_FORMAT</span>
properly. <span class="docutils literal">$BACKING_IMAGE_PATH</span> should be specified as a full absolute path.
If relative referencing of the backing image is desired, the path must be
relative to the location of image described by <span class="docutils literal">$IMAGE_PATH</span>.</p>
<p><strong>Important:</strong> If the <span class="docutils literal">$BACKING_IMAGE_FORMAT</span> is not known it can be queried
using <span class="docutils literal"><span class="pre">qemu-img</span> info $BACKING_IMAGE_PATH</span> and looking for the <span class="docutils literal">file format</span>
field, but for security reasons the value should be used <em>only</em> if at least one
of the following criteria is met:</p>
<ul class="simple">
<li><p><span class="docutils literal">file format</span> is <span class="docutils literal">raw</span></p></li>
<li><p><span class="docutils literal">backing file</span> is NOT present</p></li>
<li><p><span class="docutils literal">backing file</span> is present AND is correct/trusted</p></li>
</ul>
<p>Note that the last criterion may require manual inspection and thus should not
be scripted unless the trust for the image can be expressed programmatically.</p>
<p>Also note that the above steps may need to be repeated recursively for any
subsequent backing images.</p>
</div>
<div class="section" id="missing-images-reported-after-moving-disk-images-into-a-different-path">
<h2><a class="toc-backref" href="#id9">Missing images reported after moving disk images into a different path</a></h2>
<p>The path to the backing image which is recorded in the image metadata often
contains a full path to the backing image. This is the default libvirt-created
image configuration. When such images are moved to a different location the
top image will no longer point to the correct image.</p>
<p>To fix such issue you can either fully specify the image chain in the domain XML
as pointed out above or the following <span class="docutils literal"><span class="pre">qemu-img</span></span> command can be used:</p>
<pre class="literal-block">qemu-img rebase -u -f $IMAGE_FORMAT -F $BACKING_IMAGE_FORMAT -b $BACKING_IMAGE_PATH $IMAGE_PATH</pre>
<p>It is important to fill out <span class="docutils literal">$BACKING_IMAGE_FORMAT</span> and <span class="docutils literal">$IMAGE_FORMAT</span>
properly. <span class="docutils literal">$BACKING_IMAGE_PATH</span> should be specified as a full absolute path.
If relative referencing of the backing image is desired, the path must be
relative to the location of image described by <span class="docutils literal">$IMAGE_PATH</span>.</p>
</div>
</div>
</div>
</body>
</html>
